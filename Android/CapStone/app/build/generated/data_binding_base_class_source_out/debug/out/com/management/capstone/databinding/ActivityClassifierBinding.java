// Generated by view binder compiler. Do not edit!
package com.management.capstone.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.management.capstone.R;
import com.management.capstone.drawing.DrawView;
import java.lang.Override;

public final class ActivityClassifierBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final DrawView drawingView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final AppCompatTextView item1;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final AppCompatTextView item2;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final AppCompatTextView item3;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final AppCompatTextView item4;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final AppCompatTextView item5;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final LinearLayoutCompat itemLayout;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final LinearLayout linearLayout;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final LinearLayout mainView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button nextStage;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView resultView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView score;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button submit;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final TextView timer;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   */
  @Nullable
  public final Button unDo;

  private ActivityClassifierBinding(@NonNull ConstraintLayout rootView,
      @Nullable DrawView drawingView, @Nullable AppCompatTextView item1,
      @Nullable AppCompatTextView item2, @Nullable AppCompatTextView item3,
      @Nullable AppCompatTextView item4, @Nullable AppCompatTextView item5,
      @Nullable LinearLayoutCompat itemLayout, @Nullable LinearLayout linearLayout,
      @Nullable LinearLayout mainView, @Nullable Button nextStage, @Nullable TextView resultView,
      @Nullable TextView score, @Nullable Button submit, @Nullable TextView timer,
      @Nullable Button unDo) {
    this.rootView = rootView;
    this.drawingView = drawingView;
    this.item1 = item1;
    this.item2 = item2;
    this.item3 = item3;
    this.item4 = item4;
    this.item5 = item5;
    this.itemLayout = itemLayout;
    this.linearLayout = linearLayout;
    this.mainView = mainView;
    this.nextStage = nextStage;
    this.resultView = resultView;
    this.score = score;
    this.submit = submit;
    this.timer = timer;
    this.unDo = unDo;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityClassifierBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityClassifierBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_classifier, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityClassifierBinding bind(@NonNull View rootView) {
    DrawView drawingView = ViewBindings.findChildViewById(rootView, R.id.drawingView);

    AppCompatTextView item1 = ViewBindings.findChildViewById(rootView, R.id.item1);

    AppCompatTextView item2 = ViewBindings.findChildViewById(rootView, R.id.item2);

    AppCompatTextView item3 = ViewBindings.findChildViewById(rootView, R.id.item3);

    AppCompatTextView item4 = ViewBindings.findChildViewById(rootView, R.id.item4);

    AppCompatTextView item5 = ViewBindings.findChildViewById(rootView, R.id.item5);

    LinearLayoutCompat itemLayout = ViewBindings.findChildViewById(rootView, R.id.itemLayout);

    LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, R.id.linearLayout);

    LinearLayout mainView = ViewBindings.findChildViewById(rootView, R.id.mainView);

    Button nextStage = ViewBindings.findChildViewById(rootView, R.id.nextStage);

    TextView resultView = ViewBindings.findChildViewById(rootView, R.id.resultView);

    TextView score = ViewBindings.findChildViewById(rootView, R.id.score);

    Button submit = ViewBindings.findChildViewById(rootView, R.id.submit);

    TextView timer = ViewBindings.findChildViewById(rootView, R.id.timer);

    Button unDo = ViewBindings.findChildViewById(rootView, R.id.unDo);

    return new ActivityClassifierBinding((ConstraintLayout) rootView, drawingView, item1, item2,
        item3, item4, item5, itemLayout, linearLayout, mainView, nextStage, resultView, score,
        submit, timer, unDo);
  }
}
